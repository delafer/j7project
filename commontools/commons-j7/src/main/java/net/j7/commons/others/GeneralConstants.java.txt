package org.delafer.jlead.core;

/*
 *
 */

import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.nio.charset.Charset;
import java.security.AccessControlException;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.TimeZone;
import java.util.regex.Pattern;

/**
 *
 * @author delafer
 *
 */

public class GeneralConstants {

	public static final String  EMPTY_STRING = "";
	public static final String  DEFAULT_ENCODING = "UTF8";
	public static final String  BYTE_ENCODING = "ISO-8859-1";


	public static final Charset BYTE_CHARSET;
	public static final Charset DEFAULT_CHARSET;

	static {
		Charset bc = null;
		Charset dc = null;

		try {
			bc = Charset.forName(GeneralConstants.BYTE_ENCODING);
			dc = Charset.forName(GeneralConstants.DEFAULT_ENCODING);

		} catch (Throwable e) {
			e.printStackTrace();
		}

		BYTE_CHARSET = bc;
		DEFAULT_CHARSET = dc;
	}

	public static final Locale LOCALE_ENGLISH = new Locale("en", "");

	static {
		try {
			String timezone = System.getProperty("azureus.timezone", null);

			if (timezone != null) {

				TimeZone.setDefault(TimeZone.getTimeZone(timezone));
			}
		} catch (Throwable e) {

			// can happen in Applet
			if (e instanceof AccessControlException) {

			} else {
				e.printStackTrace();
			}
		}
	}

	public static final String INFINITY_STRING = "\u221E"; // infinity

	public static final int  CRAPPY_INFINITY_AS_INT	 = 365 * 24 * 3600; // seconds -  (365days)
	public static final long CRAPPY_INFINITE_AS_LONG = 10000 * 365 * 24 * 3600; // seconds - (10k years)

	public static final String APP_NAME = "NoName";
	public static final String APP_VERSION = "1.0.0.0";
	public static final String BUILD_VERSION = "@build.version@"; // Ant replace
	public static final String APP_SUBVER = "";
	public static final byte[] VERSION_ID = ("-" + "BL" + "1005" + "-").getBytes(); // MUST be 8 chars long!

	public static final String OSName = System.getProperty("os.name");
	public static final String OSNameLC = OSName.toLowerCase();

	public static final boolean isOSX 			= OSNameLC.startsWith("mac os");
	public static final boolean isLinux 		= OSNameLC.equals("linux");
	public static final boolean isSolaris 		= OSNameLC.equals("sunos");
	public static final boolean isFreeBSD 		= OSNameLC.equals("freebsd");
	public static final boolean isWindowsXP 	= OSNameLC.equals("windows xp");
	public static final boolean isWindows95 	= OSNameLC.equals("windows 95");
	public static final boolean isWindows98 	= OSNameLC.equals("windows 98");
	public static final boolean isWindows2000 	= OSNameLC.equals("windows 2000");
	public static final boolean isWindowsME 	= OSNameLC.equals("windows me");
	public static final boolean isWindows9598ME = isWindows95 || isWindows98 || isWindowsME;

	public static boolean isSafeMode = false;

	public static final boolean isWindows 		= OSNameLC.contains("windows");
	// If it isn't windows or OS X, it's most likely an Unix flavor
	public static final boolean isUnix = !isWindows && !isOSX;

	public static final boolean isWindowsVista;
	public static final boolean isWindowsVistaSP2OrHigher;
	public static final boolean isWindowsVistaOrHigher;
	public static final boolean isWindows7;
	public static final boolean isWindows8orHigher;

	// Common Patterns
	public static final Pattern PAT_SPLIT_COMMAWORDS	= Pattern.compile("\\s*,\\s*");
	public static final Pattern PAT_SPLIT_COMMA			= Pattern.compile(",");
	public static final Pattern PAT_SPLIT_DOT			= Pattern.compile("\\.");
	public static final Pattern PAT_SPLIT_SPACE			= Pattern.compile(" ");
	public static final Pattern PAT_SPLIT_SLASH_N		= Pattern.compile("\n");

	public static final boolean is64Bit;

	static {
		boolean _is64Bit;

		try {
			_is64Bit = System.getProperty("os.arch").contains("64");

		} catch (Throwable e) {

			_is64Bit = false;
		}

		is64Bit = _is64Bit;

		if (isWindows) {

			Float ver = null;

			try {
				ver = new Float(System.getProperty("os.version"));

			} catch (Throwable e) {
			}

			boolean vista_sp2_or_higher = false;

			if (ver == null) {

				isWindowsVista = false;
				isWindowsVistaOrHigher = false;
				isWindows7 = false;
				isWindows8orHigher = false;

			} else {
				float f_ver = ver.floatValue();

				isWindowsVista = f_ver == 6;
				isWindowsVistaOrHigher = f_ver >= 6;
				isWindows7 = f_ver >= 6.1f && f_ver < 6.2f;
				isWindows8orHigher = f_ver >= 6.2f;

				if (isWindowsVista) {

					LineNumberReader lnr = null;

					try {
						Process p = Runtime.getRuntime().exec(new String[] {
										"reg", "query", "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion", "/v", "CSDVersion" });

						lnr = new LineNumberReader(new InputStreamReader(
								p.getInputStream()));

						while (true) {

							String line = lnr.readLine();
							if (line == null) { break; }

							if (line.matches(".*CSDVersion.*")) {
								vista_sp2_or_higher = line.matches(".*Service Pack [2-9]");
								break;
							}
						}
					} catch (Throwable e) {}
					finally {
						if (lnr != null) {
							try {
								lnr.close();
							} catch (Throwable e) {}
						}
					}
				}
			}

			isWindowsVistaSP2OrHigher = vista_sp2_or_higher;
		} else {

			isWindowsVista = false;
			isWindowsVistaSP2OrHigher = false;
			isWindowsVistaOrHigher = false;
			isWindows7 = false;
			isWindows8orHigher = false;
		}
	}

	public static final boolean isOSX_10_5_OrHigher;
	public static final boolean isOSX_10_6_OrHigher;
	public static final boolean isOSX_10_7_OrHigher;
	public static final boolean isOSX_10_8_OrHigher;

	static {
		if (isOSX) {

			int first_digit = 0;
			int second_digit = 0;

			try {
				String os_version = System.getProperty("os.version");

				String[] bits = os_version.split("\\.");

				first_digit = Integer.parseInt(bits[0]);

				if (bits.length > 1) {
					second_digit = Integer.parseInt(bits[1]);
				}
			} catch (Throwable e) {}

			isOSX_10_5_OrHigher = first_digit > 10 || first_digit == 10 && second_digit >= 5;
			isOSX_10_6_OrHigher = first_digit > 10 || first_digit == 10 && second_digit >= 6;
			isOSX_10_7_OrHigher = first_digit > 10 || first_digit == 10 && second_digit >= 7;
			isOSX_10_8_OrHigher = first_digit > 10 || first_digit == 10 && second_digit >= 8;

		} else {
			isOSX_10_5_OrHigher = false;
			isOSX_10_6_OrHigher = false;
			isOSX_10_7_OrHigher = false;
			isOSX_10_8_OrHigher = false;
		}
	}

	public static final boolean isAndroid;

	static {
		String vm_name = System.getProperty("java.vm.name", "");
		isAndroid = vm_name.equalsIgnoreCase("Dalvik");
	}

	// Android is roughly 1.6 (reports as 0 for java.version)

	public static final String JAVA_VERSION = isAndroid ? "1.6" : System.getProperty("java.version");

	public static final boolean isJava7OrHigher;

	static {
		// http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html
		// should always start with n.n.

		// unless it is Android where it is always 0

		boolean _7plus;

		try {
			String[] bits = JAVA_VERSION.split("\\.");

			int first 	= Integer.parseInt(bits[0]);
			int second 	= Integer.parseInt(bits[1]);

			_7plus = first > 1 || second >= 7;

		} catch (Throwable e) {
			System.err.println("Unparsable Java version: " + JAVA_VERSION);
			e.printStackTrace();
			_7plus = false; // derp
		}

		isJava7OrHigher = _7plus;
	}

	public static final String FILE_WILDCARD = isWindows ? "*.*" : "*";

	/**
	 * compare two version strings of form n.n.n.n (e.g. 1.2.3.4)
	 *
	 * @param version_1
	 * @param version_2
	 * @return -ve -> version_1 lower, 0 = same, +ve -> version_1 higher
	 */

	public static int compareVersions(String version_1, String version_2) {
		try {
			version_1 = version_1.replaceAll("_CVS", "_B100");
			version_2 = version_2.replaceAll("_CVS", "_B100");

			if (version_1.startsWith(".")) {
				version_1 = "0" + version_1;
			}
			if (version_2.startsWith(".")) {
				version_2 = "0" + version_2;
			}

			version_1 = version_1.replaceAll("[^0-9.]", ".");
			version_2 = version_2.replaceAll("[^0-9.]", ".");

			StringTokenizer tok1 = new StringTokenizer(version_1, ".");
			StringTokenizer tok2 = new StringTokenizer(version_2, ".");

			while (true) {
				if (tok1.hasMoreTokens() && tok2.hasMoreTokens()) {

					int i1 = Integer.parseInt(tok1.nextToken());
					int i2 = Integer.parseInt(tok2.nextToken());
					if (i1 != i2) return i1 - i2;

				} else if (tok1.hasMoreTokens()) {

					int i1 = Integer.parseInt(tok1.nextToken());
					if (i1 != 0) return 1;

				} else if (tok2.hasMoreTokens()) {

					int i2 = Integer.parseInt(tok2.nextToken());
					if (i2 != 0) return -1;
				} else
					return 0;
			}
		} catch (Throwable e) {

			e.printStackTrace();
			return 0;
		}
	}

	/**
	 * Gets the current version, or if a CVS version, the one on which it is
	 * based
	 *
	 * @return
	 */

	public static String getBaseVersion() {
		return getBaseVersion(APP_VERSION);
	}

	/**
	 * is this a formal build or CVS/incremental
	 *
	 * @return
	 */

	public static String getBaseVersion(String version) {
		int p1 = version.indexOf("_"); // _CVS or _Bnn

		if (p1 == -1) return version;

		return version.substring(0, p1);
	}

	public static boolean isValidVersionFormat(String version) {
		if (version == null || version.length() == 0)
			return false;

		for (int i = 0; i < version.length(); i++) {

			char c = version.charAt(i);

			if (!(Character.isDigit(c) || c == '.')) return false;
		}

		if (version.startsWith(".") || version.endsWith(".") || version.indexOf("..") != -1)
			return false;

		return true;
	}

}
